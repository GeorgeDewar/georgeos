#!/bin/bash

echo Assembling bootloader...
nasm -O0 -f bin -o build/bootload.bin src/bootload.asm

echo Compiling GeorgeOS kernel...

nasm -o build/kernel/entry.obj src/kernel/entry.asm

#CC_OPTS=-q -0 -d0 -ms -s -wx -zls

bcc -c -Md -ansi -O -I -o build/kernel/string.obj src/kernel/util/string.c
bcc -c -Md -ansi -O -I -o build/kernel/keyboard.obj src/kernel/bios/keyboard.c
bcc -c -Md -ansi -O -I -o build/kernel/video.obj src/kernel/bios/video.c
bcc -c -Md -ansi -O -I -o build/kernel/clock.obj src/kernel/bios/clock.c
bcc -c -Md -ansi -O -I -o build/kernel/disk.obj src/kernel/bios/disk.c
bcc -c -Md -ansi -O -I -o build/kernel/filesystem.obj src/kernel/components/filesystem.c
bcc -c -Md -ansi -O -I -o build/kernel/console.obj src/kernel/components/console.c

bcc -c -Md -ansi -O -I -o build/kernel/kernel.obj src/kernel/kernel.c

echo Compiling sample application...
#nasm -O0 -f bin -o src/data/sayhi.bin src/programs/sayhi.asm

cd build/kernel

ld86 -y -d -T8000 -HD800 -0 -o kernel.bin entry.obj kernel.obj keyboard.obj\
  video.obj console.obj string.obj clock.obj disk.obj filesystem.obj  

cd ../..



if test "`whoami`" != "root" ; then
	echo "You must be logged in as root to build (for loopback mounting)"
	echo "Enter 'su' or 'sudo bash' to switch to root"
	exit
fi

if [ ! -e disk_images/mikeos.flp ]
then
	echo ">>> Creating new MikeOS floppy image..."
	mkdosfs -C disk_images/georgeos.flp 1440 || exit
fi

echo Adding bootsector to disk image...
dd count=2 seek=0 bs=512 if=build/bootload.bin of=disk_images/georgeos.flp

rm -rf tmp-loop

mkdir tmp-loop
mount -o loop -t vfat disk_images/georgeos.flp tmp-loop

echo Copying kernel and applications to disk image...
cp build/kernel/kernel.bin tmp-loop/
cp src/data/* tmp-loop/

echo Dismounting disk image...
sleep 0.2
umount tmp-loop || exit

rm -rf tmp-loop

echo Done!
#qemu-system-i386 -drive file=disk_images\georgeos.flp,format=raw,index=0,media=disk
qemu-system-i386.exe -drive file=disk_images/georgeos.flp,format=raw,index=0,if=floppy
